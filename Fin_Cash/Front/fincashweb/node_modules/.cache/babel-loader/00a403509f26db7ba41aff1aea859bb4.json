{"ast":null,"code":"var _jsxFileName = \"D:\\\\IGOR\\\\IgorAyelloBorges\\\\PROJETOS\\\\Fin_Ca$h\\\\Fin_Cash\\\\Front\\\\fincashweb\\\\src\\\\components\\\\Modal.js\";\nimport ReactModal from 'react-modal';\nReact.createElement(ReactModal, {\n  isOpen: false\n  /* Boolean describing if the modal should be shown or not. */\n  ,\n  onAfterOpen: handleAfterOpenFunc\n  /* Function that will be run after the modal has opened. */\n  ,\n  onAfterClose: handleAfterCloseFunc\n  /* Function that will be run after the modal has closed. */\n  ,\n  onRequestClose: handleRequestCloseFunc\n  /* Function that will be run when the modal is requested\r\n     to be closed (either by clicking on overlay or pressing ESC).\r\n     Note: It is not called if isOpen is changed by other means. */\n  ,\n  closeTimeoutMS: 0\n  /* Number indicating the milliseconds to wait before closing\r\n     the modal. */\n  ,\n  style: {\n    overlay: {},\n    content: {}\n  }\n  /* Object indicating styles to be used for the modal.\r\n     It has two keys, `overlay` and `content`.\r\n     See the `Styles` section for more details. */\n  ,\n  contentLabel: \"Example Modal\"\n  /* String indicating how the content container should be announced\r\n     to screenreaders */\n  ,\n  portalClassName: \"ReactModalPortal\"\n  /* String className to be applied to the portal.\r\n     See the `Styles` section for more details. */\n  ,\n  overlayClassName: \"ReactModal__Overlay\"\n  /* String className to be applied to the overlay.\r\n     See the `Styles` section for more details. */\n  ,\n  id: \"some-id\"\n  /* String id to be applied to the content div. */\n  ,\n  className: \"ReactModal__Content\"\n  /* String className to be applied to the modal content.\r\n     See the `Styles` section for more details. */\n  ,\n  bodyOpenClassName: \"ReactModal__Body--open\"\n  /* String className to be applied to the document.body \r\n     (must be a constant string).\r\n     This attribute when set as `null` doesn't add any class \r\n     to document.body.\r\n     See the `Styles` section for more details. */\n  ,\n  htmlOpenClassName: \"ReactModal__Html--open\"\n  /* String className to be applied to the document.html\r\n     (must be a constant string).\r\n     This attribute is `null` by default.\r\n     See the `Styles` section for more details. */\n  ,\n  ariaHideApp: true\n  /* Boolean indicating if the appElement should be hidden */\n  ,\n  shouldFocusAfterRender: true\n  /* Boolean indicating if the modal should be focused after render. */\n  ,\n  shouldCloseOnOverlayClick: true\n  /* Boolean indicating if the overlay should close the modal */\n  ,\n  shouldCloseOnEsc: true\n  /* Boolean indicating if pressing the esc key should close the modal\r\n     Note: By disabling the esc key from closing the modal\r\n     you may introduce an accessibility issue. */\n  ,\n  shouldReturnFocusAfterClose: true\n  /* Boolean indicating if the modal should restore focus to the element\r\n     that had focus prior to its display. */\n  ,\n  role: \"dialog\"\n  /* String indicating the role of the modal, allowing the 'dialog' role\r\n     to be applied if desired.\r\n     This attribute is `dialog` by default. */\n  ,\n  parentSelector: () => document.body\n  /* Function that will be called to get the parent element\r\n     that the modal will be attached to. */\n  ,\n  aria: {\n    labelledby: \"heading\",\n    describedby: \"full_description\"\n  }\n  /* Additional aria attributes (optional). */\n  ,\n  data: {\n    background: \"green\"\n  }\n  /* Additional data attributes (optional). */\n  ,\n  overlayRef: setOverlayRef\n  /* Overlay ref callback. */\n  ,\n  contentRef: setContentRef\n  /* Content ref callback. */\n  ,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 3\n  },\n  __self: this\n}, React.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 125\n  },\n  __self: this\n}, \"Modal Content\"));","map":{"version":3,"sources":["D:/IGOR/IgorAyelloBorges/PROJETOS/Fin_Ca$h/Fin_Cash/Front/fincashweb/src/components/Modal.js"],"names":["ReactModal","handleAfterOpenFunc","handleAfterCloseFunc","handleRequestCloseFunc","overlay","content","document","body","labelledby","describedby","background","setOverlayRef","setContentRef"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,aAAvB;AAEA,oBAAC,UAAD;AAEE,EAAA,MAAM,EACJ;AACF;AAJF;AAME,EAAA,WAAW,EACTC;AACF;AARF;AAUE,EAAA,YAAY,EACVC;AACF;AAZF;AAcE,EAAA,cAAc,EACZC;AACF;;;AAhBF;AAoBE,EAAA,cAAc,EACZ;AACF;;AAtBF;AAyBE,EAAA,KAAK,EACH;AAAEC,IAAAA,OAAO,EAAE,EAAX;AAAeC,IAAAA,OAAO,EAAE;AAAxB;AACF;;;AA3BF;AA+BE,EAAA,YAAY,EACV;AACF;;AAjCF;AAoCE,EAAA,eAAe,EACb;AACF;;AAtCF;AAyCE,EAAA,gBAAgB,EACd;AACF;;AA3CF;AA8CE,EAAA,EAAE,EACA;AACF;AAhDF;AAkDE,EAAA,SAAS,EACP;AACF;;AApDF;AAuDE,EAAA,iBAAiB,EACf;AACF;;;;;AAzDF;AA+DE,EAAA,iBAAiB,EACf;AACF;;;;AAjEF;AAsEE,EAAA,WAAW,EACT;AACF;AAxEF;AA0EE,EAAA,sBAAsB,EACpB;AACF;AA5EF;AA8EE,EAAA,yBAAyB,EACvB;AACF;AAhFF;AAkFE,EAAA,gBAAgB,EACd;AACF;;;AApFF;AAwFE,EAAA,2BAA2B,EACzB;AACF;;AA1FF;AA6FE,EAAA,IAAI,EACF;AACF;;;AA/FF;AAmGE,EAAA,cAAc,EACZ,MAAMC,QAAQ,CAACC;AACjB;;AArGF;AAwGE,EAAA,IAAI,EACF;AACEC,IAAAA,UAAU,EAAE,SADd;AAEEC,IAAAA,WAAW,EAAE;AAFf;AAIF;AA7GF;AA+GE,EAAA,IAAI,EACF;AAAEC,IAAAA,UAAU,EAAE;AAAd;AACF;AAjHF;AAmHE,EAAA,UAAU,EACRC;AACF;AArHF;AAuHE,EAAA,UAAU,EACRC;AACF;AAzHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA0HI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBA1HJ","sourcesContent":["import ReactModal from 'react-modal';\r\n\r\n<ReactModal\r\n\r\n  isOpen={\r\n    false\r\n  /* Boolean describing if the modal should be shown or not. */}\r\n\r\n  onAfterOpen={\r\n    handleAfterOpenFunc\r\n  /* Function that will be run after the modal has opened. */}\r\n\r\n  onAfterClose={\r\n    handleAfterCloseFunc\r\n  /* Function that will be run after the modal has closed. */}\r\n\r\n  onRequestClose={\r\n    handleRequestCloseFunc\r\n  /* Function that will be run when the modal is requested\r\n     to be closed (either by clicking on overlay or pressing ESC).\r\n     Note: It is not called if isOpen is changed by other means. */}\r\n\r\n  closeTimeoutMS={\r\n    0\r\n  /* Number indicating the milliseconds to wait before closing\r\n     the modal. */}\r\n\r\n  style={\r\n    { overlay: {}, content: {} }\r\n  /* Object indicating styles to be used for the modal.\r\n     It has two keys, `overlay` and `content`.\r\n     See the `Styles` section for more details. */}\r\n\r\n  contentLabel={\r\n    \"Example Modal\"\r\n  /* String indicating how the content container should be announced\r\n     to screenreaders */}\r\n\r\n  portalClassName={\r\n    \"ReactModalPortal\"\r\n  /* String className to be applied to the portal.\r\n     See the `Styles` section for more details. */}\r\n\r\n  overlayClassName={\r\n    \"ReactModal__Overlay\"\r\n  /* String className to be applied to the overlay.\r\n     See the `Styles` section for more details. */}\r\n\r\n  id={\r\n    \"some-id\"\r\n  /* String id to be applied to the content div. */}\r\n\r\n  className={\r\n    \"ReactModal__Content\"\r\n  /* String className to be applied to the modal content.\r\n     See the `Styles` section for more details. */}\r\n\r\n  bodyOpenClassName={\r\n    \"ReactModal__Body--open\"\r\n  /* String className to be applied to the document.body \r\n     (must be a constant string).\r\n     This attribute when set as `null` doesn't add any class \r\n     to document.body.\r\n     See the `Styles` section for more details. */}\r\n\r\n  htmlOpenClassName={\r\n    \"ReactModal__Html--open\"\r\n  /* String className to be applied to the document.html\r\n     (must be a constant string).\r\n     This attribute is `null` by default.\r\n     See the `Styles` section for more details. */}\r\n\r\n  ariaHideApp={\r\n    true\r\n  /* Boolean indicating if the appElement should be hidden */}\r\n\r\n  shouldFocusAfterRender={\r\n    true\r\n  /* Boolean indicating if the modal should be focused after render. */}\r\n\r\n  shouldCloseOnOverlayClick={\r\n    true\r\n  /* Boolean indicating if the overlay should close the modal */}\r\n\r\n  shouldCloseOnEsc={\r\n    true\r\n  /* Boolean indicating if pressing the esc key should close the modal\r\n     Note: By disabling the esc key from closing the modal\r\n     you may introduce an accessibility issue. */}\r\n\r\n  shouldReturnFocusAfterClose={\r\n    true\r\n  /* Boolean indicating if the modal should restore focus to the element\r\n     that had focus prior to its display. */}\r\n\r\n  role={\r\n    \"dialog\"\r\n  /* String indicating the role of the modal, allowing the 'dialog' role\r\n     to be applied if desired.\r\n     This attribute is `dialog` by default. */}\r\n\r\n  parentSelector={\r\n    () => document.body\r\n  /* Function that will be called to get the parent element\r\n     that the modal will be attached to. */}\r\n\r\n  aria={\r\n    {\r\n      labelledby: \"heading\",\r\n      describedby: \"full_description\"\r\n    }\r\n  /* Additional aria attributes (optional). */}\r\n\r\n  data={\r\n    { background: \"green\" }\r\n  /* Additional data attributes (optional). */}\r\n\r\n  overlayRef={\r\n    setOverlayRef\r\n  /* Overlay ref callback. */}\r\n\r\n  contentRef={\r\n    setContentRef\r\n  /* Content ref callback. */}>\r\n    <p>Modal Content</p>\r\n</ReactModal>"]},"metadata":{},"sourceType":"module"}